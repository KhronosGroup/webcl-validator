This document describes issues in Clang and OpenCL drivers that we
have encountered while developing the WebCL Validator.



OpenCL Drivers
==============

This section describes OpenCL driver related issues.

OpenCL Driver Differences
-------------------------

We have seen some differences in OpenCL drivers. These are not bugs,
the differences just illustrate how different vendors interpret the
OpenCL specification either more strictly or more loosely. We should
resort to using the lowest common denominator. Each of the cases below
are accepted by some drivers, but rejected by at least one driver.

- Intel: Doesn't support "__local int array[]" as function
  parameter. One needs to use "__local int *array" instead.
- AMD: Doesn't like "size_t" types as kernel parameters.
- AMD: Doesn't allow you to index vectors as in "uint4 v; v[0] = 0;".
- AMD: Doesn't allow you to access vector fields from pointer. You
  need to use "uint4 *p = &v; (*p).x = 0;" instead of "p->x = 0;".
- AMD: Compiler segfaults if array is indexed with "index[array]"
  instead of "array[index]".
- AMD: Segfaults if structure initialization refers to itself:
  __constant struct { int v; __constant int *p; } c = { 0, &c.v };
- AMD: Segfaults if kernel contains nothing but a single barrier call:
  __kernel void dummy(int d) { barrier(CLK_LOCAL_MEM_FENCE); }
- Apple: requires prototype declarations for each helper function
- Apple: gives error on e.g. signed vs. unsigned comparisons
- POCL: Requires kernel called 'main' to return int instead of void.

OpenCL Linux Driver Bugs
------------------------

We have also found nasty bugs in OpenCL drivers. For this reason
we suggest that POCL is used for now as the binary drivers of
hardware vendors seem to cause a lot of problems.

- POCL 0.8 doesn't support image3d_t. We use image3d_t in a test case to
  verify that WebCL Validator doesn't accept it.
- Intel provides stable Core iX drivers only for Windows and Xeon
  drivers only for Linux. Older Linux beta driver, that worked on
  laptop processor, couldn't cope very well with accessing the same
  vector with two different routes (directly and via a pointer). We
  haven't tested the new stable drivers yet.
- AMD provides CPU driver for Linux. However, it started to corrupt
  vector variable contents when barriers were used.
- Apple CPU driver was not able to run radix test case at all
  when unsortedValues_ buffer is created with CL_MEM_USE_HOST_PTR
  calling clEnqueueNDRangeKernel() fails stating 
  CL_INVALID_WORK_GROUP_SIZE if the same buffer is created with
  CL_MEM_COPY_HOST_PTR then running the kernel causes 
  CL_OUT_OF_RESOURCES error.



Clang
=====

This section describes limitations of Clang regarding OpenCL C
code. We should try to upstream relevant fixes at some point.

Builtin Types
-------------

Not yet fixed locally:
Trunk of Clang supports OpenCL image and event types. Support isn't
present in 3.2. We should import these changes from upstream.

Image Access Qualifiers
-----------------------

Fixed locally, but not in upstream:
Clang parser supports __read_only, __write_only and __read_write image
access qualifiers. However, these qualifiers aren't associated with
types of parameter variable declarations and they are thrown away when
AST is built.

Optional Function Qualifiers
----------------------------

Not yet fixed locally:
The __attribute__((vec_type_hint(<type>))) has been defined but isn't
currently handled properly.

Printing of AST
---------------

Fixed locally, not in upstream:
Image access qualifiers aren't printed, because they are missing from
the AST.

Not yet fixed locally:
The __attribute__((vec_type_hint(<type>))) qualifier isn't printed
because it's missing from the AST.

Fixed locally, not in upstream:
Function qualifiers are printed after function parameters instead of
printing them before the return type.

Fixed locally, not in upstream:
The __kernel qualifier is printed as
__attribute__((opencl_kernel_function)).

Preprocessing
-------------
Fixed locally, not in upstream:
Clang supports a bunch of preprosessor callbacks. This mechanism needs
to be extended with OpenCL extension pragmas.

Array Indexing
--------------

Fixed in validator tool, not in upstream:
Clang doesn't handle indexing of arrays with large integer constant
expressions (>= 2^63) properly.

Static vector initialisers are not working properly in clang 3.2
-----------------------------------------------------------------

http://clang-developers.42468.n3.nabble.com/getSourceRange-for-InitListExpr-td4033036.html
Also opened bug report: http://llvm.org/bugs/show_bug.cgi?id=16560

for now bug can be circumvented by having vector initializations wrapped inside ().

i.e (float4)(0,0,0,0) -> ((float4)(0,0,0,0))






