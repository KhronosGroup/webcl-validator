Some notes about the system and how does it work
================================================

Coding guidelines for programmer to avoid checks
------------------------------------------------

Avoid having to use unneccessary amount of 
*(), -> or [] operators, each of them causes check to be added to
code.

NOTE: in the future dependecy analysis can help to remove checks if many cases  


What memory accesses are recognized and how are they made safe
--------------------------------------------------------------

First all types of accesses are recognized and normalized to *() access

table[index]; -> (*(table + index));

struct_ptr->field; -> (*(struct_ptr)).field;

vector_type_ptr->x -> (*(vector_type_ptr)).x;

*(any_pointer); -> *(any_pointer);

Then the address inside *() notation is clamped to correct range:

*(WCL_CLAMP((type), ptr, min_ptr, max_ptr))

ISSUE: How to make access safe in case where ((type)max_ptr) - 1 < min_ptr
       is it ok to allow accessing NULL or should we define some fallback
       area for each address space? Clamp solution cannot just ignore 
       store/return 0. Branch/jump implementation is harder to do in source 
       level because we would have to do the checks for a whole block and
       then deside if that will be executed at all...

Memory zero initialization
--------------------------

* local memory is zeroed in start of each workitem

* private memory is zeroed in start of each workitem, if secure way
  is found for statically allocated constant memory initialization, 
  that method should be able to be used for private memory as well. 

ISSUE: How to avoid padding leakage for global variable initialization 
       without making assumptions of device architecture:

https://www.securecoding.cert.org/confluence/display/seccode/DCL39-C.+Avoid+information+leak+in+structure+padding

Which variable declarations must be collected to address space
--------------------------------------------------------------

* In the first phase all of them.

* Also if function argument is passed to other function as pointer,
new variable must be created for it to address space struct and 
add assignment to start of function

e.g. void foo(int bar) {
    foo2(&bar);
}

- transformed to ->

void foo(int bar) {
    wcl_allocs->pa.foo__bar = bar;
    foo2(&wcl_allocs->pa.foo__bar);
}


What other information analysis pass should collect
----------------------------------------------------

* Find out which calls are builtin calls and which ones
  are calls to internal functions.

* Find out type of each pointer that is accessed by * operator
  to be able to figure out the worst case limits.


What kind of other checks are done to validate the webcl
----------------------------------------------------------

* Check that only list of preprocessor directives that we allow 
  pass through.

* 3d image type is not supported.

* TODO: double underscore is not allowed in kernel arguments (because of our naming scheme)

*. TODO: add some more info about checks 


What additional transformations are needed
------------------------------------------

* all typedefs and #defines are collected and located to start of source in the 
original order (our own typedefs needs to be injected after originals)


TODO:

* Find out type of each pointer that is accessed and
  create WCL_CLAMP implementations to many separate limits.

* Collect information what kind of checks we need to do in addition
  to memory protection to meet the requirements (already wrote mail to webcl list about it).

* Add list / checks of allowed preprocessor directives 

* Recognize the case if we know how big value we are going to load
  and if we know that value might be bigger that [min,max] range, then add 
  additional checks and make reference to point address space specific "NULL"
  which is big enough to all loads / stores if the program. If we could just
  kill the program before memory access, it would be nice too.

* Address space specific null pointers to return if no other valid area could have
  been clamped for access (NULLS should be initialized in start of every kernel)

* system should move all typedefs to be in start of program in correct order
  and add our structures after those.

* add converter which adds padding to constant address space struct initializer

* add rewriter, which converts private struct initializations to assignments (or at least give failure of private struct initializer at start)

FUTURE:

* Add dependecy analysis to follow dependencies of limits to respect
  between function calls.

* Inject safe builtin implementations, for the builtin functions which
  might access memory evil ways (probably we need to generate code on the fly if multiple limits to check). 

* Add separate version of helper functions for each kernel and create
  different limit structures for each kernel. 

* Find worst case scenario from call graph about needed private memory
  and write stack emulation, instead of having all the private variables
  separately in provate address space struct



Implementation details and brief intro to code base
====================================================

Magic starts with 

main.cpp: We create our WebCLAction and run it with webclTool.

    clang::tooling::ClangTool webclTool(optionsParser.GetCompilations(),
                                        optionsParser.GetSourcePathList());

    clang::tooling::FrontendActionFactory *webCLActionFactory = 
        clang::tooling::newFrontendActionFactory<WebCLAction>();

    const int status = webclTool.run(webCLActionFactory);

WebCLAction.cpp: Does initialize some classes, most importantly WebCLConsumer, which does basically all the hard work.

WebCLConsumer.cpp: 

Calls all visitors to analyse and interpret AST tree. WebCLAnalyser is the visitor, which collects all the information that is needed for the few handler classes to be able to model the address spaces, dynamic memory got from kernel arguments and memory accesses in the program.

This all is done in WebCLConsumer::HandleTranslationUnit method.

Handler classes calls internally WebCLTransformer to do required changes to code. To keep system simple and brains in one place transformer does not know anything about state between calls. It does only single transformations to source according to data provided by handler classes.